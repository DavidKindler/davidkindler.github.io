{"version":3,"sources":["webpack:///./src/components/Pagination/index.jsx","webpack:///./src/templates/listing.jsx"],"names":["PaginationWrapper","styled","nav","PageBtn","Link","colors","primary","textLightest","PreviousBtn","NextBtn","Spacer","span","PageInfo","Pagination","render","this","props","currentPage","nbPages","previousUrl","to","className","React","Component","Listing","postEdges","data","allMarkdownRemark","edges","pageContext","currentPageNum","pageCount","title","config","siteTitle","SEO","Wrapper","PostListing","listingQuery"],"mappings":"gMAKA,IAAMA,EAAoBC,IAAOC,IAAV,gFAAGD,CAAH,qOAkBjBE,EAAUF,YAAOG,QAAV,sEAAGH,CAAH,8NAESI,IAAOC,QACPD,IAAOC,QAClBD,IAAOE,aAKMF,IAAOE,aAClBF,IAAOC,QACID,IAAOC,SASzBE,EAAcP,YAAOE,GAAV,0EAAGF,CAAH,gDAOXQ,EAAUR,YAAOE,GAAV,sEAAGF,CAAH,cAIPS,EAAST,IAAOU,KAAV,qEAAGV,CAAH,mJAyBNW,EAAWX,IAAOU,KAAV,uEAAGV,CAAH,8DAmCCY,E,gLA1BbC,OAAA,WAAW,IAAD,EACyBC,KAAKC,MAA9BC,EADA,EACAA,YAAaC,EADb,EACaA,QACfC,EAA8B,IAAhBF,EAAoB,IAAMA,EAAc,EAE5D,OACE,kBAACjB,EAAD,KACmB,IAAhBiB,EACC,kBAACT,EAAD,CAAaY,GAAE,IAAMD,GAArB,iBAEA,kBAACT,EAAD,CAAQW,UAAU,aAGpB,kBAACT,EAAD,aACQK,EADR,OACyBC,GAGxBD,EAAcC,EACb,kBAACT,EAAD,CAASW,GAAE,KAAMH,EAAc,IAA/B,iBAEA,kBAACP,EAAD,CAAQW,UAAU,W,GApBHC,IAAMC,W,iEC5EzBC,E,gLA2BJV,OAAA,WACE,IAAMW,EAAYV,KAAKC,MAAMU,KAAKC,kBAAkBC,MAD5C,EAE8Bb,KAAKC,MAAMa,YAAzCC,EAFA,EAEAA,eAAgBC,EAFhB,EAEgBA,UAExB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaZ,UAAWA,KAG1B,kBAAC,EAAD,CAAYP,QAASa,EAAWd,YAAaa,M,GAvC/BR,IAAMC,WAgDfe,GAHEd,YAGU","file":"component---src-templates-listing-jsx-5a5659f1d8eb359e6f53.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\nimport { colors } from '../../tokens'\n\nconst PaginationWrapper = styled.nav`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin-top: 4em;\n  justify-content: space-between;\n  width: 80%;\n  max-width: 770px;\n  padding: 25px 0;\n  margin: 0px auto;\n\n  @media (max-width: 780px) {\n    width: 90%;\n    padding: 25px 0;\n  }\n`\n\nconst PageBtn = styled(Link)`\n  border-radius: 3px;\n  background-color: ${colors.primary};\n  border: 1px solid ${colors.primary};\n  color: ${colors.textLightest};\n  padding: 8px 20px;\n  min-width: 130px;\n\n  &:hover {\n    background-color: ${colors.textLightest};\n    color: ${colors.primary};\n    border: 1px solid ${colors.primary};\n  }\n\n  @media (max-width: 564px) {\n    margin-top: 10px;\n    width: 100%;\n  }\n`\n\nconst PreviousBtn = styled(PageBtn)`\n  order: 1;\n  @media (max-width: 564px) {\n    order: 2;\n  }\n`\n\nconst NextBtn = styled(PageBtn)`\n  order: 3;\n`\n\nconst Spacer = styled.span`\n  display: block;\n  min-width: 130px;\n\n  &.previous {\n    order: 1;\n  }\n\n  &.next {\n    order: 3;\n  }\n\n  @media (max-width: 564px) {\n    display: none;\n\n    &.previous {\n      order: 2;\n    }\n\n    &.next {\n      order: 3;\n    }\n  }\n`\n\nconst PageInfo = styled.span`\n  order: 2;\n  padding: 1em 0;\n  @media (max-width: 564px) {\n    order: 1;\n  }\n`\n\nclass Pagination extends React.Component {\n  render () {\n    const { currentPage, nbPages } = this.props\n    const previousUrl = currentPage === 2 ? '/' : currentPage - 1\n\n    return (\n      <PaginationWrapper>\n        {currentPage !== 1 ? (\n          <PreviousBtn to={`/${previousUrl}`}>‹ Newer posts</PreviousBtn>\n        ) : (\n          <Spacer className='previous' />\n        )}\n\n        <PageInfo>\n          Page {currentPage} of {nbPages}\n        </PageInfo>\n\n        {currentPage < nbPages ? (\n          <NextBtn to={`/${currentPage + 1}`}>Older posts ›</NextBtn>\n        ) : (\n          <Spacer className='next' />\n        )}\n      </PaginationWrapper>\n    )\n  }\n}\n\nexport default Pagination\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport Wrapper from '../components/Wrapper'\nimport SEO from '../components/SEO'\nimport Pagination from '../components/Pagination'\nimport config from '../../data/siteConfig'\n// import './listing.css'\n\nclass Listing extends React.Component {\n  // renderPaging () {\n  //   const { currentPageNum, pageCount } = this.props.pageContext\n  //   const prevPage = currentPageNum - 1 === 1 ? '/' : `/${currentPageNum - 1}/`\n  //   const nextPage = `/${currentPageNum + 1}/`\n  //   const isFirstPage = currentPageNum === 1\n  //   const isLastPage = currentPageNum === pageCount\n\n  //   return (\n  //     <>\n  //       {!isFirstPage && <Link to={prevPage}>Previous</Link>}\n  //       {[...Array(pageCount)].map((_val, index) => {\n  //         const pageNum = index + 1\n  //         return (\n  //           <Link\n  //             key={`listing-page-${pageNum}`}\n  //             to={pageNum === 1 ? '/' : `/${pageNum}/`}\n  //           >\n  //             {pageNum}\n  //           </Link>\n  //         )\n  //       })}\n  //       {!isLastPage && <Link to={nextPage}>Next</Link>}\n  //     </>\n  //   )\n  // }\n\n  render () {\n    const postEdges = this.props.data.allMarkdownRemark.edges\n    const { currentPageNum, pageCount } = this.props.pageContext\n\n    return (\n      <Layout>\n        <Helmet title={config.siteTitle} />\n        <SEO />\n        <Wrapper>\n          <PostListing postEdges={postEdges} />\n        </Wrapper>\n        {/* {this.renderPaging()} */}\n        <Pagination nbPages={pageCount} currentPage={currentPageNum} />\n      </Layout>\n    )\n  }\n}\n\nexport default Listing\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      filter: { fileAbsolutePath: { regex: \"//content/posts//\" } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}