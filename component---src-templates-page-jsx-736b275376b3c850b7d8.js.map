{"version":3,"sources":["webpack:///./src/components/ContentHeader/index.jsx","webpack:///./src/components/Content/index.jsx","webpack:///./src/components/Article/index.jsx","webpack:///./src/templates/page.jsx","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["Header","styled","header","colors","textLight","ContentIntro","render","this","props","date","tags","Array","isArray","length","PostTags","icon","React","Component","ContentBody","div","links","highlight_code_linebg","highlight_code_bg","highlight_code_oneline","white","Content","content","ContentHeader","ArticleWrapper","article","media","medium","Article","footer","post","body","frontmatter","data","title","config","siteTitle","postPath","fields","slug","postNode","postSEO","heroImg","cover","pageQuery","require","useMDXComponents","mdx","useMDXScope","module","scope","components","children","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn"],"mappings":"kMAKA,IAAMA,EAASC,IAAOC,OAAV,uEAAGD,CAAH,kCAEDE,IAAOC,WAqBHC,E,0LAjBbC,OAAA,WAAW,IAAD,EACeC,KAAKC,MAApBC,EADA,EACAA,KAAMC,EADN,EACMA,KAEd,OACE,kBAACV,EAAD,KACGS,GAAQ,8BAAOA,GACfE,MAAMC,QAAQF,IAASA,EAAKG,OAAS,GACpC,kBAAC,WAAD,KACE,qCACA,kBAACC,EAAA,EAAD,CAAUJ,KAAMA,EAAMK,MAAI,O,GAVXC,IAAMC,W,qBCJjC,IAAMC,EAAcjB,IAAOkB,IAAV,0EAAGlB,CAAH,u6CAkBWE,IAAOiB,MA4CXjB,IAAOkB,sBAMClB,IAAOmB,kBAcrBnB,IAAOoB,uBAuBQpB,IAAOqB,OAoBzBC,E,0LAdbnB,OAAA,WAAW,IAAD,EACwBC,KAAKC,MAA7BkB,EADA,EACAA,QAASjB,EADT,EACSA,KAAMC,EADf,EACeA,KAEvB,OACE,kCACIA,GAAQD,IAAS,kBAACkB,EAAD,CAAelB,KAAMA,EAAMC,KAAMA,IACpD,kBAACQ,EAAD,KACE,kBAAC,IAAD,KAAcQ,M,GARFV,IAAMC,WC9G5B,IAAMW,EAAiB3B,IAAO4B,QAAV,8EAAG5B,CAAH,+CAGT6B,IAAMC,QAYXC,GAPgB/B,IAAOgC,OAAV,6EAAGhC,CAAH,sF,0LAQjBK,OAAA,WAAW,IACD4B,EAAS3B,KAAKC,MAAd0B,KAER,OACE,kBAACN,EAAD,KACE,kBAAC,EAAD,CACEF,QAASQ,EAAKC,KACd1B,KAAMyB,EAAKE,YAAY3B,KACvBC,KAAMwB,EAAKE,YAAY1B,S,GATXM,IAAMC,YAmBbe,O,kCCxCf,gLAee,mBAAAxB,GAIb,OAEE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,+BAAWA,EAAM6B,KAAKH,KAAKE,YAAYE,MAAvC,MAAkDC,IAAOC,YAE3D,kBAAC,IAAD,CACEC,SAAUjC,EAAM6B,KAAKH,KAAKQ,OAAOC,KACjCC,SAAUpC,EAAM6B,KAAKH,KACrBW,SAAO,IAET,kBAAC,IAAD,CACEC,QAAStC,EAAM6B,KAAKH,KAAKE,YAAYW,MACrCT,MAAO9B,EAAM6B,KAAKH,KAAKE,YAAYE,QAErC,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAASJ,KAAM1B,EAAM6B,KAAKH,UAkD3B,IAAMc,EAAS,c,ysECvFtB,IAAMhC,EAAQiC,EAAd,Q,EACkCA,EAAQ,QAAlCC,E,EAAAA,iBAAkBC,E,EAAAA,IAClBC,EAAgBH,EAAQ,QAAxBG,YAERC,UAAiB,SAAqB,GAKlC,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGhD,E,oIACF,sCACKiD,EAAgBP,EAAtB,GACMQ,EAAWN,EAFhB,GAKKO,EAAM3C,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAM4C,EAAS,GAGb5C,MAHa,EAIbmC,OAJF,GAQMU,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOxC,EAAA,mBAA2BuC,WAAYE,GAA9C","file":"component---src-templates-page-jsx-736b275376b3c850b7d8.js","sourcesContent":["import React, { Fragment } from 'react'\nimport styled from 'styled-components'\nimport PostTags from '../PostTags'\nimport { colors } from '../../tokens'\n\nconst Header = styled.header`\n  margin-bottom: 2rem;\n  color: ${colors.textLight};\n`\n\nclass ContentIntro extends React.Component {\n  render () {\n    const { date, tags } = this.props\n\n    return (\n      <Header>\n        {date && <time>{date}</time>}\n        {Array.isArray(tags) && tags.length > 0 && (\n          <Fragment>\n            <span> in</span>\n            <PostTags tags={tags} icon />\n          </Fragment>\n        )}\n      </Header>\n    )\n  }\n}\n\nexport default ContentIntro\n","import React from 'react'\nimport styled from 'styled-components'\nimport ContentHeader from '../ContentHeader'\nimport { colors } from '../../tokens'\nimport MDXRenderer from 'gatsby-plugin-mdx/mdx-renderer'\n\nconst ContentBody = styled.div`\n  line-height: 1.6;\n\n  & > h2 {\n    padding-top: 3rem;\n    margin-top: 3rem;\n    border-top: 1px solid #ececec;\n  }\n\n  & > h3 {\n    padding-top: 3rem;\n  }\n\n  & > p {\n    margin: 1em 0 0 0;\n  }\n\n  & a {\n    box-shadow: 0 2px 0 0 ${colors.links};\n\n    &:hover {\n      filter: brightness(150%);\n      box-shadow: none;\n    }\n\n    &.anchor,\n    &.gatsby-resp-image-link {\n      box-shadow: none;\n    }\n  }\n\n  & > blockquote {\n    box-sizing: border-box;\n    background-color: #f7f7f7;\n    border-left: 5px solid rgb(244, 213, 36);\n    margin: 30px 0px;\n    padding: 5px 20px;\n    border-radius: 0 8px 8px 0;\n  }\n\n  & > blockquote p {\n    margin: 0.8em 0;\n    font-style: italic;\n  }\n\n  & .gatsby-highlight {\n    border-radius: 5px;\n    font-size: 15px;\n    line-height: 1.7;\n    border-radius: 10px;\n    overflow: auto;\n    tab-size: 1.5em;\n    margin: 1.5em 0em 1.5em 0;\n  }\n\n  & .gatsby-highlight > pre {\n    border: 0;\n    margin: 0;\n    padding: 1;\n  }\n\n  & .gatsby-highlight-code-line {\n    background-color: ${colors.highlight_code_linebg};\n    display: block;\n    margin-right: -1em;\n    margin-left: -1em;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    border-left: 0.25em solid ${colors.highlight_code_bg};\n  }\n\n  & h1 > code.language-text,\n  & h2 > code.language-text,\n  & h3 > code.language-text,\n  & h4 > code.language-text,\n  & h5 > code.language-text,\n  & h6 > code.language-text,\n  & a > code.language-text,\n  & p > code.language-text,\n  & li > code.language-text,\n  & em > code.language-text,\n  & strong > code.language-text {\n    background: ${colors.highlight_code_oneline};\n    color: #222222cc;\n    padding: 0 3px;\n    font-size: 0.94em;\n    border-radius: 0.3rem;\n    word-wrap: break-word;\n  }\n\n  & code {\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  & table {\n    margin-top: 1em;\n    border-collapse: collapse;\n    border-radius: 0.5em;\n    overflow: hidden;\n\n    & th,\n    & td {\n      padding: 0.5em;\n      background: #f7f7f7;\n      border-bottom: 2px solid ${colors.white};\n    }\n  }\n`\n\nclass Content extends React.Component {\n  render () {\n    const { content, date, tags } = this.props\n\n    return (\n      <section>\n        {(tags || date) && <ContentHeader date={date} tags={tags} />}\n        <ContentBody>\n          <MDXRenderer>{content}</MDXRenderer>\n        </ContentBody>\n      </section>\n    )\n  }\n}\n\nexport default Content\n","import React from 'react'\nimport styled from 'styled-components'\n// import Bio from './Bio'\nimport Content from '../Content'\nimport { media } from '../../tokens'\n\nconst ArticleWrapper = styled.article`\n  padding: 0 30px 30px;\n\n  @media ${media.medium} {\n    padding: 0;\n  }\n`\n\nconst ArticleFooter = styled.footer`\n  position: relative;\n  margin: 6rem 0 0;\n  padding: 3rem 0 0;\n  border-top: 1px solid #ececec;\n`\n\nclass Article extends React.Component {\n  render () {\n    const { post } = this.props\n\n    return (\n      <ArticleWrapper>\n        <Content\n          content={post.body}\n          date={post.frontmatter.date}\n          tags={post.frontmatter.tags}\n        />\n        {/* <ArticleFooter>\n          <Bio />\n        </ArticleFooter>  */}\n      </ArticleWrapper>\n    )\n  }\n}\n\nexport default Article\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Helmet from 'react-helmet'\nimport Layout from '../layout'\n// import Content from '../components/Content'\nimport Wrapper from '../components/Wrapper'\nimport Article from '../components/Article'\n\nimport Hero from '../components/Hero'\nimport SEO from '../components/SEO'\n// import Disqus from '../components/Disqus'\nimport config from '../../data/siteConfig'\n\nexport default props => {\n  // console.log('page props', props)\n  // const page = props.data.page\n\n  return (\n    // <Layout location={props.location}>\n    <Layout>\n      {/* <pre>{JSON.stringify(props, null, 2)}</pre> */}\n      <Helmet>\n        <title>{`${props.data.post.frontmatter.title} | ${config.siteTitle}`}</title>\n      </Helmet>\n      <SEO\n        postPath={props.data.post.fields.slug}\n        postNode={props.data.post}\n        postSEO\n      />\n      <Hero\n        heroImg={props.data.post.frontmatter.cover}\n        title={props.data.post.frontmatter.title}\n      />\n      <Wrapper>\n        {/* <PostTags tags={post.tags} /> */}\n        <Article post={props.data.post} />\n        {/* <div dangerouslySetInnerHTML={{ __html: postNode.html }} /> */}\n\n        {/* <UserInfo config={config} /> */}\n      </Wrapper>\n\n      {/* <SEO\n        title={page.frontmatter.title}\n        description={page.excerpt}\n        path={page.frontmatter.slug}\n        cover={page.frontmatter.cover && page.frontmatter.cover.publicURL}\n      />\n\n      <Hero\n        heroImg={page.frontmatter.cover && page.frontmatter.cover.publicURL}\n        title={page.frontmatter.title}\n      />\n\n      <Wrapper>\n        <article>\n          <Content content={page.body} date={page.frontmatter.date} />\n        </article>\n      </Wrapper>\n\n      {page.frontmatter.disqus && (\n        <Wrapper>\n          <Disqus slug={page.frontmatter.slug} title={page.frontmatter.title} />\n        </Wrapper>\n      )} */}\n    </Layout>\n  )\n}\n\n// export const pageQuery = graphql`\n//   query($slug: String!) {\n//     page: mdx(frontmatter: { slug: { eq: $slug } }) {\n//       body\n//       excerpt\n//       frontmatter {\n//         title\n//         date\n//         slug\n//         cover {\n//           publicURL\n//         }\n//       }\n//     }\n//   }\n// `\n\nexport const pageQuery = graphql`\n  query PageBySlug($slug: String!) {\n    post: mdx(frontmatter: { slug: { eq: $slug } }) {\n      excerpt\n      body\n      frontmatter {\n        title\n        category\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        tags\n        cover {\n          publicURL\n          childImageSharp {\n            fluid {\n              srcSet\n            }\n          }\n        }\n        disqus\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}