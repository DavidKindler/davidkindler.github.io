{"version":3,"sources":["webpack:///./src/templates/tag.jsx"],"names":["TagTemplate","render","postEdges","this","props","data","allMarkdownRemark","edges","title","config","siteTitle","pageContext","tag","React","Component","pageQuery"],"mappings":"gRAWqBA,E,gLACnBC,OAAA,WACE,IAAMC,EAAYC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAGpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,gDAAsBP,KAAKC,MAAMO,YAAYC,IAA7C,KACA,kBAAC,IAAD,CAAaV,UAAWA,O,GAXOW,IAAMC,WAiClCC,EAAS","file":"component---src-templates-tag-jsx-b3bdb9cd1f687a608583.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport Wrapper from '../components/Wrapper'\nimport SEO from '../components/SEO'\n// import Pagination from '../components/Pagination'\n\nimport config from '../../data/SiteConfig'\n\nexport default class TagTemplate extends React.Component {\n  render () {\n    const postEdges = this.props.data.allMarkdownRemark.edges\n    // const { currentPageNum, pageCount } = this.props.pageContext\n\n    return (\n      <Layout>\n        <Helmet title={config.siteTitle} />\n        <SEO />\n        <Wrapper>\n          <h1>Posts tagged as \"{this.props.pageContext.tag}\"</h1>\n          <PostListing postEdges={postEdges} />\n        </Wrapper>\n        {/* {this.renderPaging()} */}\n        {/* <Pagination nbPages={pageCount} currentPage={currentPageNum} /> */}\n      </Layout>\n    )\n\n    // const { tag } = this.props.pageContext\n    // const postEdges = this.props.data.allMarkdownRemark.edges\n    // return (\n    //   <Layout>\n    //     <div className='tag-container'>\n    //       <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\n    //       <PostListing postEdges={postEdges} />\n    //       tag page\n    //     </div>\n    //   </Layout>\n    // )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}