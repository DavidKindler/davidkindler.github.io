{"version":3,"sources":["webpack:///./src/components/Pagination/index.jsx","webpack:///./src/templates/listing.jsx"],"names":["PaginationWrapper","styled","nav","PageBtn","Link","colors","primary","textLightest","PreviousBtn","NextBtn","Spacer","span","PageInfo","Pagination","render","this","props","currentPage","nbPages","previousUrl","to","className","React","Component","Listing","postEdges","data","allMarkdownRemark","edges","pageContext","currentPageNum","pageCount","title","config","siteTitle","SEO","Wrapper","PostListing","listingQuery"],"mappings":"gMAKA,IAAMA,EAAoBC,IAAOC,IAAV,gFAAGD,CAAH,qOAkBjBE,EAAUF,YAAOG,QAAV,sEAAGH,CAAH,8NAESI,IAAOC,QACPD,IAAOC,QAClBD,IAAOE,aAKMF,IAAOE,aAClBF,IAAOC,QACID,IAAOC,SASzBE,EAAcP,YAAOE,GAAV,0EAAGF,CAAH,gDAOXQ,EAAUR,YAAOE,GAAV,sEAAGF,CAAH,cAIPS,EAAST,IAAOU,KAAV,qEAAGV,CAAH,mJAyBNW,EAAWX,IAAOU,KAAV,uEAAGV,CAAH,8DAmCCY,E,gLA1BbC,OAAA,WAAW,IAAD,EACyBC,KAAKC,MAA9BC,EADA,EACAA,YAAaC,EADb,EACaA,QACfC,EAA8B,IAAhBF,EAAoB,IAAMA,EAAc,EAE5D,OACE,kBAACjB,EAAD,KACmB,IAAhBiB,EACC,kBAACT,EAAD,CAAaY,GAAE,IAAMD,GAArB,iBAEA,kBAACT,EAAD,CAAQW,UAAU,aAGpB,kBAACT,EAAD,aACQK,EADR,OACyBC,GAGxBD,EAAcC,EACb,kBAACT,EAAD,CAASW,GAAE,KAAMH,EAAc,IAA/B,iBAEA,kBAACP,EAAD,CAAQW,UAAU,W,GApBHC,IAAMC,W,iEC5EzBC,E,gLA2BJV,OAAA,WACE,IAAMW,EAAYV,KAAKC,MAAMU,KAAKC,kBAAkBC,MAD5C,EAE8Bb,KAAKC,MAAMa,YAAzCC,EAFA,EAEAA,eAAgBC,EAFhB,EAEgBA,UAExB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaZ,UAAWA,KAG1B,kBAAC,EAAD,CAAYP,QAASa,EAAWd,YAAaa,M,GAvC/BR,IAAMC,WAgDfe,GAHEd,YAGU","file":"component---src-templates-listing-jsx-e42d5b2a862bdb46df01.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport styled from 'styled-components'\r\nimport { colors } from '../../tokens'\r\n\r\nconst PaginationWrapper = styled.nav`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 4em;\r\n  justify-content: space-between;\r\n  width: 80%;\r\n  max-width: 770px;\r\n  padding: 25px 0;\r\n  margin: 0px auto;\r\n\r\n  @media (max-width: 780px) {\r\n    width: 90%;\r\n    padding: 25px 0;\r\n  }\r\n`\r\n\r\nconst PageBtn = styled(Link)`\r\n  border-radius: 3px;\r\n  background-color: ${colors.primary};\r\n  border: 1px solid ${colors.primary};\r\n  color: ${colors.textLightest};\r\n  padding: 8px 20px;\r\n  min-width: 130px;\r\n\r\n  &:hover {\r\n    background-color: ${colors.textLightest};\r\n    color: ${colors.primary};\r\n    border: 1px solid ${colors.primary};\r\n  }\r\n\r\n  @media (max-width: 564px) {\r\n    margin-top: 10px;\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst PreviousBtn = styled(PageBtn)`\r\n  order: 1;\r\n  @media (max-width: 564px) {\r\n    order: 2;\r\n  }\r\n`\r\n\r\nconst NextBtn = styled(PageBtn)`\r\n  order: 3;\r\n`\r\n\r\nconst Spacer = styled.span`\r\n  display: block;\r\n  min-width: 130px;\r\n\r\n  &.previous {\r\n    order: 1;\r\n  }\r\n\r\n  &.next {\r\n    order: 3;\r\n  }\r\n\r\n  @media (max-width: 564px) {\r\n    display: none;\r\n\r\n    &.previous {\r\n      order: 2;\r\n    }\r\n\r\n    &.next {\r\n      order: 3;\r\n    }\r\n  }\r\n`\r\n\r\nconst PageInfo = styled.span`\r\n  order: 2;\r\n  padding: 1em 0;\r\n  @media (max-width: 564px) {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nclass Pagination extends React.Component {\r\n  render () {\r\n    const { currentPage, nbPages } = this.props\r\n    const previousUrl = currentPage === 2 ? '/' : currentPage - 1\r\n\r\n    return (\r\n      <PaginationWrapper>\r\n        {currentPage !== 1 ? (\r\n          <PreviousBtn to={`/${previousUrl}`}>‹ Newer posts</PreviousBtn>\r\n        ) : (\r\n          <Spacer className='previous' />\r\n        )}\r\n\r\n        <PageInfo>\r\n          Page {currentPage} of {nbPages}\r\n        </PageInfo>\r\n\r\n        {currentPage < nbPages ? (\r\n          <NextBtn to={`/${currentPage + 1}`}>Older posts ›</NextBtn>\r\n        ) : (\r\n          <Spacer className='next' />\r\n        )}\r\n      </PaginationWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../layout'\r\nimport PostListing from '../components/PostListing'\r\nimport Wrapper from '../components/Wrapper'\r\nimport SEO from '../components/SEO'\r\nimport Pagination from '../components/Pagination'\r\nimport config from '../../data/SiteConfig'\r\n// import './listing.css'\r\n\r\nclass Listing extends React.Component {\r\n  // renderPaging () {\r\n  //   const { currentPageNum, pageCount } = this.props.pageContext\r\n  //   const prevPage = currentPageNum - 1 === 1 ? '/' : `/${currentPageNum - 1}/`\r\n  //   const nextPage = `/${currentPageNum + 1}/`\r\n  //   const isFirstPage = currentPageNum === 1\r\n  //   const isLastPage = currentPageNum === pageCount\r\n\r\n  //   return (\r\n  //     <>\r\n  //       {!isFirstPage && <Link to={prevPage}>Previous</Link>}\r\n  //       {[...Array(pageCount)].map((_val, index) => {\r\n  //         const pageNum = index + 1\r\n  //         return (\r\n  //           <Link\r\n  //             key={`listing-page-${pageNum}`}\r\n  //             to={pageNum === 1 ? '/' : `/${pageNum}/`}\r\n  //           >\r\n  //             {pageNum}\r\n  //           </Link>\r\n  //         )\r\n  //       })}\r\n  //       {!isLastPage && <Link to={nextPage}>Next</Link>}\r\n  //     </>\r\n  //   )\r\n  // }\r\n\r\n  render () {\r\n    const postEdges = this.props.data.allMarkdownRemark.edges\r\n    const { currentPageNum, pageCount } = this.props.pageContext\r\n\r\n    return (\r\n      <Layout>\r\n        <Helmet title={config.siteTitle} />\r\n        <SEO />\r\n        <Wrapper>\r\n          <PostListing postEdges={postEdges} />\r\n        </Wrapper>\r\n        {/* {this.renderPaging()} */}\r\n        <Pagination nbPages={pageCount} currentPage={currentPageNum} />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Listing\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const listingQuery = graphql`\r\n  query ListingQuery($skip: Int!, $limit: Int!) {\r\n    allMarkdownRemark(\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { fileAbsolutePath: { regex: \"//content/posts//\" } }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}