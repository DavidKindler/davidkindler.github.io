{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./src/components/PostListItem/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["TagTemplate","render","postEdges","this","props","data","allMarkdownRemark","edges","title","config","siteTitle","pageContext","tag","React","Component","pageQuery","Post","styled","article","ReadPost","Link","colors","primary","primaryAlpha","textLightest","PostDate","time","textLight","PostHeader","header","Excerpt","PostTitleLink","PostsListItem","excerpt","slug","date","tags","to","dangerouslySetInnerHTML","__html","PostTags","icon","aria-label","PostListing","getPostList","postList","forEach","postEdge","push","node","fields","frontmatter","cover","timeToRead","map","post","key"],"mappings":"2SAWqBA,E,gLACnBC,OAAA,WACE,IAAMC,EAAYC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAGpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,gDAAsBP,KAAKC,MAAMO,YAAYC,IAA7C,KACA,kBAAC,IAAD,CAAaV,UAAWA,O,GAXOW,IAAMC,WAiClCC,EAAS,c,qHCpChBC,EAAOC,IAAOC,QAAV,qEAAGD,CAAH,2EAKJE,EAAWF,YAAOG,QAAV,yEAAGH,CAAH,iOASHI,IAAOC,QAGMD,IAAOE,aAElBF,IAAOG,cAIdC,EAAWR,IAAOS,KAAV,yEAAGT,CAAH,0DACHI,IAAOM,WAOZC,EAAaX,IAAOY,OAAV,2EAAGZ,CAAH,oBAIVa,EAAUb,YAAOG,QAAV,wEAAGH,CAAH,4GAKWI,IAAOC,QAClBD,IAAOG,cAKdO,EAAgBd,YAAOG,QAAV,8EAAGH,CAAH,qDACRI,IAAOC,QAEcD,IAAOC,SA6BxBU,EAzBO,SAAA5B,GAAU,IACtBI,EAAqCJ,EAArCI,MAAOyB,EAA8B7B,EAA9B6B,QAASC,EAAqB9B,EAArB8B,KAAMC,EAAe/B,EAAf+B,KAAMC,EAAShC,EAATgC,KAGpC,OACE,kBAACpB,EAAD,KACE,kBAACY,EAAD,KACE,4BACE,kBAACG,EAAD,CAAeM,GAAIH,GAAO1B,KAG9B,iCACE,kBAACsB,EAAD,CAASO,GAAIH,EAAMI,wBAAyB,CAAEC,OAAQN,MAGxD,gCACE,kBAACO,EAAA,EAAD,CAAUJ,KAAMA,EAAMK,MAAM,IAC5B,kBAAChB,EAAD,KAAWU,GACX,kBAAChB,EAAD,CAAUkB,GAAIH,EAAMQ,aAAA,QAAoBlC,EAApB,YAApB,kB,IC3EFmC,E,wLACJC,YAAA,WACE,IAAMC,EAAW,GAYjB,OAXA1C,KAAKC,MAAMF,UAAU4C,SAAQ,SAAAC,GAC3BF,EAASG,KAAK,CACZd,KAAMa,EAASE,KAAKC,OAAOhB,KAC3BE,KAAMW,EAASE,KAAKE,YAAYf,KAChCgB,MAAOL,EAASE,KAAKE,YAAYC,MACjC5C,MAAOuC,EAASE,KAAKE,YAAY3C,MACjC2B,KAAMY,EAASE,KAAKC,OAAOf,KAC3BF,QAASc,EAASE,KAAKhB,QACvBoB,WAAYN,EAASE,KAAKI,gBAGvBR,G,EAGT5C,OAAA,WACE,IAAM4C,EAAW1C,KAAKyC,cACtB,OACE,oCAEEC,EAASS,KAAI,SAAAC,GAIX,OAAO,kBAAC,EAAD,eAAeC,IAAKD,EAAK/C,OAAW+C,S,GA1B3B1C,IAAMC,WAiCjB6B","file":"component---src-templates-tag-jsx-bcb5ee81dba3a8808352.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport Wrapper from '../components/Wrapper'\nimport SEO from '../components/SEO'\n// import Pagination from '../components/Pagination'\n\nimport config from '../../data/siteConfig'\n\nexport default class TagTemplate extends React.Component {\n  render () {\n    const postEdges = this.props.data.allMarkdownRemark.edges\n    // const { currentPageNum, pageCount } = this.props.pageContext\n\n    return (\n      <Layout>\n        <Helmet title={config.siteTitle} />\n        <SEO />\n        <Wrapper>\n          <h1>Posts tagged as \"{this.props.pageContext.tag}\"</h1>\n          <PostListing postEdges={postEdges} />\n        </Wrapper>\n        {/* {this.renderPaging()} */}\n        {/* <Pagination nbPages={pageCount} currentPage={currentPageNum} /> */}\n      </Layout>\n    )\n\n    // const { tag } = this.props.pageContext\n    // const postEdges = this.props.data.allMarkdownRemark.edges\n    // return (\n    //   <Layout>\n    //     <div className='tag-container'>\n    //       <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\n    //       <PostListing postEdges={postEdges} />\n    //       tag page\n    //     </div>\n    //   </Layout>\n    // )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover {\n              publicURL\n            }\n            date\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport PostTags from '../PostTags'\n// import useSiteMetadata from '../../hooks/use-site-config'\n// import Article from '../Article'\nimport styled from 'styled-components'\nimport { colors } from '../../tokens'\n\nconst Post = styled.article`\n  border-bottom: 1px solid rgba(214, 209, 230, 0.5);\n  padding-bottom: 1.25rem;\n`\n\nconst ReadPost = styled(Link)`\n  display: block;\n  font-size: 0.75rem;\n  margin-top: 1rem;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  line-height: 2;\n  color: ${colors.primary};\n\n  &:hover {\n    background-color: ${colors.primaryAlpha};\n    border-radius: 0.25rem;\n    color: ${colors.textLightest};\n  }\n`\n\nconst PostDate = styled.time`\n  color: ${colors.textLight};\n  &:before {\n    content: 'ðŸ—“';\n    margin-right: 0.2rem;\n  }\n`\n\nconst PostHeader = styled.header`\n  padding: 1em 0;\n`\n\nconst Excerpt = styled(Link)`\n  display: block;\n  line-height: 1.45;\n  margin-bottom: 0.5em;\n  &:hover {\n    background-color: ${colors.primary};\n    color: ${colors.textLightest};\n    opacity: 0.7;\n  }\n`\n\nconst PostTitleLink = styled(Link)`\n  color: ${colors.primary};\n  &:hover {\n    border-bottom: 1px dotted ${colors.primary};\n  }\n`\n\nconst PostsListItem = props => {\n  const { title, excerpt, slug, date, tags } = props\n  // const { multilangPosts } = useSiteMetadata()\n\n  return (\n    <Post>\n      <PostHeader>\n        <h2>\n          <PostTitleLink to={slug}>{title}</PostTitleLink>\n        </h2>\n      </PostHeader>\n      <section>\n        <Excerpt to={slug} dangerouslySetInnerHTML={{ __html: excerpt }} />\n      </section>\n      {/* <Article post={props} /> */}\n      <footer>\n        <PostTags tags={tags} icon={true} />\n        <PostDate>{date}</PostDate>\n        <ReadPost to={slug} aria-label={`View ${title} article`}>\n          Read post â€º\n        </ReadPost>\n      </footer>\n    </Post>\n  )\n}\nexport default PostsListItem\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport PostsListItem from '../PostListItem'\n\nclass PostListing extends React.Component {\n  getPostList () {\n    const postList = []\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        slug: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })\n    })\n    return postList\n  }\n\n  render () {\n    const postList = this.getPostList()\n    return (\n      <>\n        {/* Your post list here. */\n        postList.map(post => {\n          // <Link to={post.path} key={post.title}>\n          //   <h1>{post.title}</h1>\n          // </Link>\n          return <PostsListItem key={post.title} {...post} />\n        })}\n      </>\n    )\n  }\n}\n\nexport default PostListing\n"],"sourceRoot":""}